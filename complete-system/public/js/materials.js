// Materials module for Construction CRM
// –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤

class MaterialsModule {
    constructor() {
        this.container = null;
        this.materials = [];
        this.currentMaterial = null;
        this.filters = {
            category: '',
            status: '',
            search: ''
        };
        this.pagination = {
            page: 1,
            limit: 20,
            total: 0
        };
        this.categories = [
            '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
            '–û—Ç–¥–µ–ª–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
            '–≠–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
            '–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞',
            '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
            '–ö—Ä–µ–ø–µ–∂–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è',
            '–ò–∑–æ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
            '–õ–∞–∫–æ–∫—Ä–∞—Å–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'
        ];
    }

    // Initialize materials module
    async init() {
        console.log('üß± Initializing Materials module...');
        this.container = document.getElementById('content-area');
        await this.render();
        await this.loadMaterials();
        this.initEventListeners();
    }

    // Render materials layout
    async render() {
        this.container.innerHTML = `
            <div class="materials-module">
                <!-- Header with actions -->
                <div class="module-header">
                    <div class="header-left">
                        <h2 class="module-title">
                            <i class="fas fa-boxes"></i>
                            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
                        </h2>
                        <p class="module-description">–ö–∞—Ç–∞–ª–æ–≥ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</p>
                    </div>
                    <div class="header-actions">
                        <button class="btn btn-outline" onclick="materialsModule.exportMaterials()">
                            <i class="fas fa-download"></i>
                            –≠–∫—Å–ø–æ—Ä—Ç
                        </button>
                        <button class="btn btn-outline" onclick="materialsModule.importMaterials()">
                            <i class="fas fa-upload"></i>
                            –ò–º–ø–æ—Ä—Ç
                        </button>
                        <button class="btn btn-primary" onclick="materialsModule.showCreateMaterialModal()">
                            <i class="fas fa-plus"></i>
                            –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª
                        </button>
                    </div>
                </div>

                <!-- Filters -->
                <div class="card filters-panel">
                    <div class="card-body">
                        <div class="filters-row">
                            <div class="filter-group">
                                <label>–ü–æ–∏—Å–∫</label>
                                <div class="search-box">
                                    <input type="text" id="materials-search" placeholder="–ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...">
                                    <i class="fas fa-search"></i>
                                </div>
                            </div>
                            <div class="filter-group">
                                <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                                <select id="materials-category-filter">
                                    <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                                    ${this.categories.map(cat => `<option value="${cat}">${cat}</option>`).join('')}
                                </select>
                            </div>
                            <div class="filter-group">
                                <label>–°—Ç–∞—Ç—É—Å</label>
                                <select id="materials-status-filter">
                                    <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                                    <option value="active">–ê–∫—Ç–∏–≤–Ω—ã–π</option>
                                    <option value="discontinued">–°–Ω—è—Ç —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞</option>
                                    <option value="out_of_stock">–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</option>
                                </select>
                            </div>
                            <div class="filter-group">
                                <button class="btn btn-secondary" onclick="materialsModule.resetFilters()">
                                    <i class="fas fa-times"></i>
                                    –°–±—Ä–æ—Å–∏—Ç—å
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Materials Grid/List Toggle -->
                <div class="view-controls">
                    <div class="view-toggle">
                        <button class="btn btn-sm btn-outline active" data-view="grid" onclick="materialsModule.setViewMode('grid')">
                            <i class="fas fa-th"></i>
                        </button>
                        <button class="btn btn-sm btn-outline" data-view="list" onclick="materialsModule.setViewMode('list')">
                            <i class="fas fa-list"></i>
                        </button>
                    </div>
                    <div class="results-info">
                        <span id="materials-count">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                    </div>
                </div>

                <!-- Materials Content -->
                <div id="materials-content" class="materials-grid">
                    <div class="loading-placeholder">
                        <div class="spinner"></div>
                        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...</p>
                    </div>
                </div>

                <!-- Pagination -->
                <div class="pagination-container" id="materials-pagination">
                    <!-- Pagination will be rendered here -->
                </div>
            </div>

            <!-- Create Material Modal -->
            <div id="create-material-modal" class="modal-overlay">
                <div class="modal modal-lg">
                    <div class="modal-header">
                        <h3>–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª</h3>
                        <button class="modal-close" onclick="materialsModule.closeCreateModal()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form id="create-material-form">
                            <div class="form-grid cols-2">
                                <div class="form-group">
                                    <label for="material-name">–ù–∞–∑–≤–∞–Ω–∏–µ *</label>
                                    <input type="text" id="material-name" name="name" required>
                                </div>
                                <div class="form-group">
                                    <label for="material-article">–ê—Ä—Ç–∏–∫—É–ª</label>
                                    <input type="text" id="material-article" name="article">
                                </div>
                                <div class="form-group">
                                    <label for="material-category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è *</label>
                                    <select id="material-category" name="category" required>
                                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                                        ${this.categories.map(cat => `<option value="${cat}">${cat}</option>`).join('')}
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label for="material-unit">–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è *</label>
                                    <select id="material-unit" name="unit" required>
                                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É</option>
                                        <option value="—à—Ç">—à—Ç</option>
                                        <option value="–º">–º</option>
                                        <option value="–º¬≤">–º¬≤</option>
                                        <option value="–º¬≥">–º¬≥</option>
                                        <option value="–∫–≥">–∫–≥</option>
                                        <option value="—Ç">—Ç</option>
                                        <option value="–ª">–ª</option>
                                        <option value="—É–ø–∞–∫">—É–ø–∞–∫</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label for="material-price">–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É</label>
                                    <input type="number" id="material-price" name="price" step="0.01" min="0">
                                </div>
                                <div class="form-group">
                                    <label for="material-supplier">–ü–æ—Å—Ç–∞–≤—â–∏–∫</label>
                                    <input type="text" id="material-supplier" name="supplier">
                                </div>
                                <div class="form-group">
                                    <label for="material-min-stock">–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫</label>
                                    <input type="number" id="material-min-stock" name="minStock" min="0">
                                </div>
                                <div class="form-group">
                                    <label for="material-status">–°—Ç–∞—Ç—É—Å</label>
                                    <select id="material-status" name="status">
                                        <option value="active">–ê–∫—Ç–∏–≤–Ω—ã–π</option>
                                        <option value="discontinued">–°–Ω—è—Ç —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞</option>
                                        <option value="out_of_stock">–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</option>
                                    </select>
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="material-specifications">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</label>
                                <textarea id="material-specifications" name="specifications" rows="3" 
                                         placeholder="–†–∞–∑–º–µ—Ä—ã, –≤–µ—Å, –º–∞—Ç–µ—Ä–∏–∞–ª, —Ü–≤–µ—Ç –∏ –¥—Ä—É–≥–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏..."></textarea>
                            </div>
                            <div class="form-group">
                                <label for="material-description">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                                <textarea id="material-description" name="description" rows="3"></textarea>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" onclick="materialsModule.closeCreateModal()">
                            –û—Ç–º–µ–Ω–∞
                        </button>
                        <button type="submit" class="btn btn-primary" form="create-material-form">
                            <i class="fas fa-save"></i>
                            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                        </button>
                    </div>
                </div>
            </div>

            <!-- View Material Modal -->
            <div id="view-material-modal" class="modal-overlay">
                <div class="modal modal-lg">
                    <div class="modal-header">
                        <h3 id="view-material-title">–ú–∞—Ç–µ—Ä–∏–∞–ª</h3>
                        <button class="modal-close" onclick="materialsModule.closeViewModal()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div id="material-details">
                            <!-- Material details will be loaded here -->
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" onclick="materialsModule.closeViewModal()">
                            –ó–∞–∫—Ä—ã—Ç—å
                        </button>
                        <button type="button" class="btn btn-primary" onclick="materialsModule.editCurrentMaterial()">
                            <i class="fas fa-edit"></i>
                            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    // Load materials from API
    async loadMaterials() {
        try {
            // Mock materials data
            const mockMaterials = [
                {
                    id: 1,
                    name: '–ö–∏—Ä–ø–∏—á –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏–π',
                    article: 'KIR-001',
                    category: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
                    unit: '—à—Ç',
                    price: 12.50,
                    supplier: '–û–û–û "–°—Ç—Ä–æ–π–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"',
                    status: 'active',
                    min_stock: 1000,
                    current_stock: 5000,
                    specifications: '–†–∞–∑–º–µ—Ä: 250x120x65 –º–º, –ü—Ä–æ—á–Ω–æ—Å—Ç—å: –ú150, –ú–æ—Ä–æ–∑–æ—Å—Ç–æ–π–∫–æ—Å—Ç—å: F50',
                    description: '–ö–µ—Ä–∞–º–∏—á–µ—Å–∫–∏–π –∫–∏—Ä–ø–∏—á –æ–¥–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–ª–Ω–æ—Ç–µ–ª—ã–π',
                    created_at: '2024-01-10'
                },
                {
                    id: 2,
                    name: '–¶–µ–º–µ–Ω—Ç –ú400',
                    article: 'CEM-400',
                    category: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
                    unit: '–∫–≥',
                    price: 8.50,
                    supplier: '–¶–µ–º–µ–Ω—Ç–Ω—ã–π –∑–∞–≤–æ–¥ "–ü—Ä–æ–≥—Ä–µ—Å—Å"',
                    status: 'active',
                    min_stock: 500,
                    current_stock: 2000,
                    specifications: '–ú–∞—Ä–∫–∞: –ú400, –£–ø–∞–∫–æ–≤–∫–∞: –º–µ—à–æ–∫ 50–∫–≥',
                    description: '–ü–æ—Ä—Ç–ª–∞–Ω–¥—Ü–µ–º–µ–Ω—Ç –æ–±—â–µ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
                    created_at: '2024-01-08'
                },
                {
                    id: 3,
                    name: '–ö—Ä–∞—Å–∫–∞ –≤–æ–¥–æ—ç–º—É–ª—å—Å–∏–æ–Ω–Ω–∞—è –±–µ–ª–∞—è',
                    article: 'PAINT-WE-001',
                    category: '–õ–∞–∫–æ–∫—Ä–∞—Å–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
                    unit: '–ª',
                    price: 350.00,
                    supplier: '–õ–∞–∫–æ–∫—Ä–∞—Å–æ—á–Ω—ã–π –∑–∞–≤–æ–¥ "–†–∞–¥—É–≥–∞"',
                    status: 'active',
                    min_stock: 50,
                    current_stock: 120,
                    specifications: '–û—Å–Ω–æ–≤–∞: –≤–æ–¥–Ω–∞—è, –†–∞—Å—Ö–æ–¥: 8-12 –º¬≤/–ª, –í—Ä–µ–º—è –≤—ã—Å—ã—Ö–∞–Ω–∏—è: 2 —á–∞—Å–∞',
                    description: '–í–æ–¥–æ—ç–º—É–ª—å—Å–∏–æ–Ω–Ω–∞—è –∫—Ä–∞—Å–∫–∞ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ä–∞–±–æ—Ç',
                    created_at: '2024-01-05'
                },
                {
                    id: 4,
                    name: '–ü–ª–∏—Ç–∫–∞ –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è 30x30',
                    article: 'TILE-CER-001',
                    category: '–û—Ç–¥–µ–ª–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
                    unit: '–º¬≤',
                    price: 890.00,
                    supplier: '–ö–µ—Ä–∞–º–∏–∫–∞-–õ—é–∫—Å',
                    status: 'active',
                    min_stock: 10,
                    current_stock: 45,
                    specifications: '–†–∞–∑–º–µ—Ä: 300x300 –º–º, –ö–ª–∞—Å—Å –∏–∑–Ω–æ—Å–æ—Å—Ç–æ–π–∫–æ—Å—Ç–∏: PEI III, –í–æ–¥–æ–ø–æ–≥–ª–æ—â–µ–Ω–∏–µ: <3%',
                    description: '–ö–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è –Ω–∞–ø–æ–ª—å–Ω–∞—è –ø–ª–∏—Ç–∫–∞ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø–æ–º–µ—â–µ–Ω–∏–π',
                    created_at: '2024-01-03'
                }
            ];

            this.materials = mockMaterials;
            this.pagination.total = mockMaterials.length;

            this.renderMaterials();
            this.renderPagination();
            this.updateResultsInfo();

        } catch (error) {
            console.error('Error loading materials:', error);
            showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤', 'error');
        }
    }

    // Render materials
    renderMaterials() {
        const container = document.getElementById('materials-content');
        
        if (this.materials.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-boxes fa-3x text-muted mb-3"></i>
                    <h4>–ù–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</h4>
                    <p class="text-muted">–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –∫–∞—Ç–∞–ª–æ–≥</p>
                </div>
            `;
            return;
        }

        const isGridView = container.classList.contains('materials-grid');

        if (isGridView) {
            container.innerHTML = this.materials.map(material => `
                <div class="material-card" onclick="materialsModule.viewMaterial(${material.id})">
                    <div class="material-header">
                        <div class="material-category">${material.category}</div>
                        <div class="material-status">
                            <span class="badge badge-${this.getStatusBadgeClass(material.status)}">
                                ${this.getStatusText(material.status)}
                            </span>
                        </div>
                    </div>
                    <div class="material-info">
                        <h4 class="material-name">${material.name}</h4>
                        <p class="material-article">–ê—Ä—Ç–∏–∫—É–ª: ${material.article || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                        <div class="material-price">
                            ${material.price ? NumberUtils.formatCurrency(material.price) + ' / ' + material.unit : '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
                        </div>
                        <div class="material-stock">
                            <span class="stock-label">–û—Å—Ç–∞—Ç–æ–∫:</span>
                            <span class="stock-value ${material.current_stock <= material.min_stock ? 'low-stock' : ''}">
                                ${material.current_stock || 0} ${material.unit}
                            </span>
                        </div>
                    </div>
                    <div class="material-actions">
                        <button class="btn btn-sm btn-primary" onclick="event.stopPropagation(); materialsModule.viewMaterial(${material.id})" title="–ü—Ä–æ—Å–º–æ—Ç—Ä">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-sm btn-secondary" onclick="event.stopPropagation(); materialsModule.editMaterial(${material.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="event.stopPropagation(); materialsModule.deleteMaterial(${material.id})" title="–£–¥–∞–ª–∏—Ç—å">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `).join('');
        } else {
            container.innerHTML = `
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                                <th>–ê—Ä—Ç–∏–∫—É–ª</th>
                                <th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
                                <th>–¶–µ–Ω–∞</th>
                                <th>–û—Å—Ç–∞—Ç–æ–∫</th>
                                <th>–°—Ç–∞—Ç—É—Å</th>
                                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${this.materials.map(material => `
                                <tr>
                                    <td>
                                        <div class="item-info">
                                            <div class="item-title">${material.name}</div>
                                            <div class="item-subtitle">${material.supplier || '–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω'}</div>
                                        </div>
                                    </td>
                                    <td>${material.article || '-'}</td>
                                    <td><span class="category-badge">${material.category}</span></td>
                                    <td>
                                        ${material.price ? NumberUtils.formatCurrency(material.price) + ' / ' + material.unit : '-'}
                                    </td>
                                    <td>
                                        <span class="stock-value ${material.current_stock <= material.min_stock ? 'low-stock' : ''}">
                                            ${material.current_stock || 0} ${material.unit}
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge badge-${this.getStatusBadgeClass(material.status)}">
                                            ${this.getStatusText(material.status)}
                                        </span>
                                    </td>
                                    <td>
                                        <div class="action-buttons">
                                            <button class="btn btn-sm btn-primary" onclick="materialsModule.viewMaterial(${material.id})" title="–ü—Ä–æ—Å–º–æ—Ç—Ä">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            <button class="btn btn-sm btn-secondary" onclick="materialsModule.editMaterial(${material.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-sm btn-danger" onclick="materialsModule.deleteMaterial(${material.id})" title="–£–¥–∞–ª–∏—Ç—å">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                </div>
            `;
        }
    }

    // Initialize event listeners
    initEventListeners() {
        // Search
        const searchInput = document.getElementById('materials-search');
        searchInput?.addEventListener('input', debounce((e) => {
            this.filters.search = e.target.value;
            this.pagination.page = 1;
            this.loadMaterials();
        }, 300));

        // Category filter
        const categoryFilter = document.getElementById('materials-category-filter');
        categoryFilter?.addEventListener('change', (e) => {
            this.filters.category = e.target.value;
            this.pagination.page = 1;
            this.loadMaterials();
        });

        // Status filter
        const statusFilter = document.getElementById('materials-status-filter');
        statusFilter?.addEventListener('change', (e) => {
            this.filters.status = e.target.value;
            this.pagination.page = 1;
            this.loadMaterials();
        });

        // Create form
        const createForm = document.getElementById('create-material-form');
        createForm?.addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleCreateMaterial();
        });
    }

    // Set view mode
    setViewMode(mode) {
        const container = document.getElementById('materials-content');
        const toggleButtons = document.querySelectorAll('.view-toggle button');
        
        toggleButtons.forEach(btn => btn.classList.remove('active'));
        document.querySelector(`[data-view="${mode}"]`).classList.add('active');
        
        if (mode === 'grid') {
            container.className = 'materials-grid';
        } else {
            container.className = 'materials-list';
        }
        
        this.renderMaterials();
    }

    // Update results info
    updateResultsInfo() {
        const countElement = document.getElementById('materials-count');
        if (countElement) {
            countElement.textContent = `–ù–∞–π–¥–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: ${this.materials.length}`;
        }
    }

    // Show create material modal
    showCreateMaterialModal() {
        document.getElementById('create-material-modal').classList.add('show');
    }

    // Close create modal
    closeCreateModal() {
        document.getElementById('create-material-modal').classList.remove('show');
        document.getElementById('create-material-form').reset();
    }

    // Handle create material
    async handleCreateMaterial() {
        try {
            const formData = new FormData(document.getElementById('create-material-form'));
            const materialData = Object.fromEntries(formData.entries());

            // Mock creation
            const newMaterial = {
                id: Date.now(),
                name: materialData.name,
                article: materialData.article,
                category: materialData.category,
                unit: materialData.unit,
                price: parseFloat(materialData.price) || 0,
                supplier: materialData.supplier,
                status: materialData.status,
                min_stock: parseInt(materialData.minStock) || 0,
                current_stock: 0,
                specifications: materialData.specifications,
                description: materialData.description,
                created_at: new Date().toISOString().split('T')[0]
            };

            this.materials.unshift(newMaterial);
            this.renderMaterials();
            this.updateResultsInfo();

            showNotification('–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
            this.closeCreateModal();

        } catch (error) {
            console.error('Error creating material:', error);
            showNotification('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞', 'error');
        }
    }

    // View material
    viewMaterial(id) {
        const material = this.materials.find(m => m.id === id);
        if (!material) return;

        this.currentMaterial = material;
        document.getElementById('view-material-title').textContent = material.name;
        
        const detailsContainer = document.getElementById('material-details');
        detailsContainer.innerHTML = `
            <div class="material-info-detailed">
                <div class="info-grid">
                    <div class="info-item">
                        <label>–ê—Ä—Ç–∏–∫—É–ª</label>
                        <span>${material.article || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                    </div>
                    <div class="info-item">
                        <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                        <span class="category-badge">${material.category}</span>
                    </div>
                    <div class="info-item">
                        <label>–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è</label>
                        <span>${material.unit}</span>
                    </div>
                    <div class="info-item">
                        <label>–¶–µ–Ω–∞</label>
                        <span class="price-value">
                            ${material.price ? NumberUtils.formatCurrency(material.price) + ' / ' + material.unit : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
                        </span>
                    </div>
                    <div class="info-item">
                        <label>–ü–æ—Å—Ç–∞–≤—â–∏–∫</label>
                        <span>${material.supplier || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                    </div>
                    <div class="info-item">
                        <label>–°—Ç–∞—Ç—É—Å</label>
                        <span class="badge badge-${this.getStatusBadgeClass(material.status)}">
                            ${this.getStatusText(material.status)}
                        </span>
                    </div>
                    <div class="info-item">
                        <label>–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫</label>
                        <span class="stock-value ${material.current_stock <= material.min_stock ? 'low-stock' : ''}">
                            ${material.current_stock || 0} ${material.unit}
                        </span>
                    </div>
                    <div class="info-item">
                        <label>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫</label>
                        <span>${material.min_stock || 0} ${material.unit}</span>
                    </div>
                </div>
                ${material.specifications ? `
                    <div class="specifications">
                        <h4>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h4>
                        <p>${material.specifications}</p>
                    </div>
                ` : ''}
                ${material.description ? `
                    <div class="description">
                        <h4>–û–ø–∏—Å–∞–Ω–∏–µ</h4>
                        <p>${material.description}</p>
                    </div>
                ` : ''}
            </div>
        `;

        document.getElementById('view-material-modal').classList.add('show');
    }

    // Close view modal
    closeViewModal() {
        document.getElementById('view-material-modal').classList.remove('show');
        this.currentMaterial = null;
    }

    // Edit material
    editMaterial(id) {
        showNotification('–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏', 'info');
    }

    // Delete material
    async deleteMaterial(id) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª?')) return;

        try {
            this.materials = this.materials.filter(m => m.id !== id);
            this.renderMaterials();
            this.updateResultsInfo();
            showNotification('–ú–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
        } catch (error) {
            console.error('Error deleting material:', error);
            showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞', 'error');
        }
    }

    // Export materials
    exportMaterials() {
        showNotification('–≠–∫—Å–ø–æ—Ä—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏', 'info');
    }

    // Import materials
    importMaterials() {
        showNotification('–ò–º–ø–æ—Ä—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏', 'info');
    }

    // Reset filters
    resetFilters() {
        this.filters = {
            category: '',
            status: '',
            search: ''
        };
        
        document.getElementById('materials-search').value = '';
        document.getElementById('materials-category-filter').value = '';
        document.getElementById('materials-status-filter').value = '';
        
        this.pagination.page = 1;
        this.loadMaterials();
    }

    // Render pagination
    renderPagination() {
        const container = document.getElementById('materials-pagination');
        const totalPages = Math.ceil(this.pagination.total / this.pagination.limit);
        
        if (totalPages <= 1) {
            container.innerHTML = '';
            return;
        }

        let paginationHTML = '<div class="pagination">';
        
        if (this.pagination.page > 1) {
            paginationHTML += `<button class="btn btn-sm btn-outline" onclick="materialsModule.goToPage(${this.pagination.page - 1})">
                <i class="fas fa-chevron-left"></i>
            </button>`;
        }

        for (let i = 1; i <= totalPages; i++) {
            const isActive = i === this.pagination.page ? 'active' : '';
            paginationHTML += `<button class="btn btn-sm btn-outline ${isActive}" onclick="materialsModule.goToPage(${i})">${i}</button>`;
        }

        if (this.pagination.page < totalPages) {
            paginationHTML += `<button class="btn btn-sm btn-outline" onclick="materialsModule.goToPage(${this.pagination.page + 1})">
                <i class="fas fa-chevron-right"></i>
            </button>`;
        }

        paginationHTML += '</div>';
        container.innerHTML = paginationHTML;
    }

    // Go to page
    goToPage(page) {
        this.pagination.page = page;
        this.loadMaterials();
    }

    // Helper methods
    getStatusText(status) {
        const statusMap = {
            active: '–ê–∫—Ç–∏–≤–Ω—ã–π',
            discontinued: '–°–Ω—è—Ç —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞',
            out_of_stock: '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'
        };
        return statusMap[status] || status;
    }

    getStatusBadgeClass(status) {
        const classMap = {
            active: 'success',
            discontinued: 'warning',
            out_of_stock: 'danger'
        };
        return classMap[status] || 'secondary';
    }

    // Show/hide module
    show() {
        if (this.container) {
            this.container.style.display = 'block';
            this.loadMaterials();
        }
    }

    hide() {
        if (this.container) {
            this.container.style.display = 'none';
        }
    }
}

// Create global instance
const materialsModule = new MaterialsModule();

// Export for use in other modules
if (typeof module !== 'undefined' && module.exports) {
    module.exports = MaterialsModule;
}